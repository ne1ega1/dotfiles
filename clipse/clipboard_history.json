{"clipboardHistory":[{"value":"sudo pacman -Qs xdg-portal","recorded":"2024-10-07 23:30:08.421028606","filePath":"null","pinned":false},{"value":"https://github.com/dharmx/walls.git","recorded":"2024-10-07 23:28:09.712692864","filePath":"null","pinned":false},{"value":"üì∑ 302075-89768728.png","recorded":"2024-10-07 23:25:08.066986546","filePath":"/home/jumanji/.config/clipse/tmp_files/302075-89768728.png","pinned":false},{"value":"üì∑ 3071480-783680816.png","recorded":"2024-10-07 23:22:48.256701371","filePath":"/home/jumanji/.config/clipse/tmp_files/3071480-783680816.png","pinned":false},{"value":"\\","recorded":"2024-10-07 23:15:41.205531533","filePath":"null","pinned":false},{"value":" ","recorded":"2024-10-07 23:15:39.774895537","filePath":"null","pinned":false},{"value":"  -isl 32 \\\n","recorded":"2024-10-07 23:12:49.097284833","filePath":"null","pinned":false},{"value":"~/.config/nwg-panel/nwg_menu_start.sh","recorded":"2024-10-07 23:12:08.749167928","filePath":"null","pinned":false},{"value":"nwg_menu_start.sh","recorded":"2024-10-07 23:11:43.359819662","filePath":"null","pinned":false},{"value":"~/.config/nwg-panel/","recorded":"2024-10-07 23:10:46.169824908","filePath":"null","pinned":false},{"value":"~ menu styling\n","recorded":"2024-10-07 23:08:29.85702736","filePath":"null","pinned":false},{"value":"#!/bin/bash\n\nnwg-menu \\\n  -s \"menu-start2.css\" \\\n  -va \"top\" \\\n  -ha \"left\" \\\n  -fm \"dolphin\" \\\n  -cmd-lock \"swaylock -f\" \\\n  -cmd-logout \"hyprctl dispatch exit\" \\\n  -cmd-restart \"systemctl -i reboot\" \\\n  -cmd-shutdown \"systemctl -i poweroff\" \\\n  -d \\\n#~ menu styling\n#~ -height 300 \\\n#~ -width 400\n#~ -isl 32 \\\n#~ -iss 16 \\\n#~ -lang \"de\" \\\n#~ -padding 2 \\\n# -mb 100 \\\n#~ -ml 10 \\\n#~ -mr 10 \\\n# -mt 100 \\\n#~ -o \"your_output_name\" \\\n#~ -term \"alacritty\" \\\n#~ -v \\","recorded":"2024-10-07 23:07:07.733144985","filePath":"null","pinned":false},{"value":"https://gitlab.ptsecurity.com/etldata/salt_parser_json/-/tree/ddryupin_salt?ref_type=heads","recorded":"2024-10-07 22:53:02.738851847","filePath":"null","pinned":false},{"value":"\"saltstack\": {\n    \"salt\": [\n      \"CVE-2021-25282\",\n      \"CVE-2017-8109\",\n      \"CVE-2020-16846\",\n      \"CVE-2018-15751\",\n      \"CVE-2021-25281\",\n      \"CVE-2016-1866\",\n      \"CVE-2017-14696\",\n      \"CVE-2021-22004\",\n      \"CVE-2019-17361\",\n      \"CVE-2015-8034\",\n      \"CVE-2021-3197\",\n      \"CVE-2022-22934\",\n      \"CVE-2016-9639\",\n      \"CVE-2021-33226\",\n      \"CVE-2020-11652\",\n      \"CVE-2015-1839\",\n      \"CVE-2020-25592\",\n      \"CVE-2023-20897\",\n      \"CVE-2015-4017\",\n      \"CVE-2021-25283\",\n      \"CVE-2022-22967\",\n      \"CVE-2016-3176\",\n      \"CVE-2022-22936\",\n      \"CVE-2020-17490\",\n      \"CVE-2021-31607\",\n      \"CVE-2018-15750\",\n      \"CVE-2017-5200\",\n      \"CVE-2021-3148\",\n      \"CVE-2017-12791\",\n      \"CVE-2020-11651\",\n      \"CVE-2022-22941\",\n      \"CVE-2013-6617\",\n      \"CVE-2013-4436\",\n      \"CVE-2015-1838\",\n      \"CVE-2022-22935\",\n      \"CVE-2020-28972\",\n      \"CVE-2021-21996\",\n      \"CVE-2017-14695\",\n      \"CVE-2017-7893\",\n      \"CVE-2017-5192\",\n      \"CVE-2013-4435\",\n      \"CVE-2021-3144\",\n      \"CVE-2014-3563\",\n      \"CVE-2013-4437\",\n      \"CVE-2021-25284\",\n      \"CVE-2020-28243\",\n      \"CVE-2020-35662\",\n      \"CVE-2013-4438\",\n      \"CVE-2023-20898\",\n      \"CVE-2013-4439\"\n    ],\n    \"salt_2015\": [\n      \"CVE-2015-6941\",\n      \"CVE-2015-6918\"\n    ],\n    \"salt_2018\": [\n      \"CVE-2019-1010259\"\n    ],\n    \"salt_2019\": [\n      \"CVE-2019-1010259\"\n    ],\n    \"saltstack\": [\n      \"CVE-2013-2228\"\n    ]\n  }","recorded":"2024-10-07 22:51:58.869886429","filePath":"null","pinned":false},{"value":"saltstack","recorded":"2024-10-07 22:47:01.306617382","filePath":"null","pinned":false},{"value":"from os import access\n","recorded":"2024-10-07 22:41:11.59952156","filePath":"null","pinned":false},{"value":", ADDITIONAL_SOURCES_LIST","recorded":"2024-10-07 22:33:27.134835025","filePath":"null","pinned":false},{"value":"from ptetl.constants import FileExtensions\n","recorded":"2024-10-07 22:33:15.683888205","filePath":"null","pinned":false},{"value":"from ptetl.constants import TaskTypes, FileExtensions, ADDITIONAL_SOURCES_LIST\n","recorded":"2024-10-07 22:33:07.222194838","filePath":"null","pinned":false},{"value":"from ptetl.operators.mounted_code_execute_operator import MountedCodeExecuteOperator\n","recorded":"2024-10-07 22:32:25.689698315","filePath":"null","pinned":false},{"value":"from ptetl.operators.accumulator import AccumulatorOperator\n","recorded":"2024-10-07 22:31:52.265052438","filePath":"null","pinned":false},{"value":"accumulate = AccumulatorOperator(\n        operator_config=dag_config.get_operator_config(file_extension=FileExtensions.XML)\n    )\n\n    parse = MountedCodeExecuteOperator(\n        operator_config=dag_config.get_operator_config(\n            task_type=TaskTypes.PARSER,\n            file_extension=FileExtensions.JSON\n        ),\n        robot_name='os_nova'\n    )","recorded":"2024-10-07 22:30:48.705452341","filePath":"null","pinned":false},{"value":"\n","recorded":"2024-10-07 22:17:43.197906762","filePath":"null","pinned":false},{"value":"DocumentModel","recorded":"2024-10-07 22:16:09.791938384","filePath":"null","pinned":false},{"value":"external","recorded":"2024-10-07 22:15:52.119731071","filePath":"null","pinned":false},{"value":"from document_sdk.pydantic_models.document_model import DocumentModel\n","recorded":"2024-10-07 22:15:30.750410889","filePath":"null","pinned":false},{"value":"from validate_model import Cve","recorded":"2024-10-07 22:15:04.063594168","filePath":"null","pinned":false},{"value":"Annotated[str, StringConstraints(min_length=1)]","recorded":"2024-10-07 22:12:09.996576306","filePath":"null","pinned":false},{"value":"from typing_extensions import Annotated\n","recorded":"2024-10-07 22:11:33.006040102","filePath":"null","pinned":false},{"value":"from pydantic import BaseModel","recorded":"2024-10-07 22:09:27.352787282","filePath":"null","pinned":false},{"value":"\"\"\"\n–ü–∞—Ä—Å–µ—Ä Salt\n\n–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã\n@ddryupin\n03.10.2024\n–¢–ó - https://wiki.ptsecurity.com/pages/viewpage.action?pageId=429985368\n–ó–∞–¥–∞—á–∞ - https://youtrack.ptsecurity.com/issue/VMHCC-14911\n\"\"\"\n","recorded":"2024-10-07 22:08:49.670510705","filePath":"null","pinned":false},{"value":"from packaging.version import Version","recorded":"2024-10-07 22:07:20.626552519","filePath":"null","pinned":false},{"value":"—É—è–∑–≤–∏–º—ã —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–º–∫–∞—Ö \n","recorded":"2024-10-07 22:04:48.153101899","filePath":"null","pinned":false},{"value":"    versions = []\n","recorded":"2024-10-07 22:00:59.109664204","filePath":"null","pinned":false},{"value":"\n    versions = []\n","recorded":"2024-10-07 22:00:37.37622668","filePath":"null","pinned":false},{"value":"VERSIONS_PATTERN = re.compile(r'\\d+\\.?\\d*\\.?\\d*')\n","recorded":"2024-10-07 21:57:05.773744408","filePath":"null","pinned":false},{"value":"VERSIONS_LIST_PATTERN = re.compile(r'\\d+\\.?\\d*\\.?\\d*.*')\n","recorded":"2024-10-07 21:57:03.517800918","filePath":"null","pinned":false},{"value":"versions = []\n\n    for xpath in XPATH_LIST:\n        versions = html.xpath(xpath).getall()\n        if versions:\n            break\n\n    intervals = build_intervals(versions)\n","recorded":"2024-10-07 21:55:53.957834356","filePath":"null","pinned":false},{"value":"def build_intervals(versions):\n    \n    intervals = []\n\n    for version_list in versions:\n\n        if not VERSIONS_LIST_PATTERN.search(version_list):\n                continue\n\n        splitted_version_list = version_list.split(', ')\n        first_version = Version(splitted_version_list[0])\n        if first_version.micro == 0:\n            left_value = Version(f'{first_version.major}.0.0')\n        else:\n            left_value = Version(f'{first_version.major}.{first_version.minor}.0')\n\n        for version in splitted_version_list:\n\n            parsed_version = Version(version)\n            current_version = Version(f'{parsed_version.major}.{parsed_version.minor}.{parsed_version.micro}')\n\n            if parsed_version.major == left_value.major:\n                intervals.append(\n                    dict(\n                        left_value=str(left_value),\n                        right_value=str(current_version)\n                    )\n                )\n            else:\n                intervals.append(\n                    dict(\n                        left_value=f'{current_version.major}.{current_version.minor}.0',\n                        right_value=str(current_version)\n                    )\n                )\n\n            left_value = current_version\n\n    return intervals\n","recorded":"2024-10-07 21:55:21.07014419","filePath":"null","pinned":false},{"value":"cve_ids = html.xpath('//h3[contains(text(), \"CVE\")]/text()').getall()\n    impacts = html.xpath('//li[contains(strong/text(), \"Impact\")]/text()').getall()\n    solutions = html.xpath('//li[contains(strong/text(), \"Solution\")]/text()').getall()\n    descriptions = html.xpath('//li[contains(strong/text(), \"Description\")]/text()').getall()\n    severity_ratings = html.xpath('//li[contains(strong/text(), \"Severity Rating\")]/text()').getall()\n\n    versions = []\n\n    for xpath in XPATH_LIST:\n        versions = html.xpath(xpath).getall()\n        if versions:\n            break\n\n    intervals = build_intervals(versions)\n\n    mapping_list = ['cve_id', 'description', 'impact', 'severity_rating', 'solution']\n\n    raw_list = zip(cve_ids, descriptions, impacts, severity_ratings, solutions)\n\n    result_list = [\n        {\n            key: value for key, value in zip(mapping_list, map)\n        } for map in raw_list\n    ]\n\n    for cve_info in result_list:\n        cve_info['intervals'] = intervals\n","recorded":"2024-10-07 21:52:24.687289204","filePath":"null","pinned":false},{"value":"    cve_info = html.xpath('//h2/following-sibling::node()[following::h2]')\n","recorded":"2024-10-07 21:50:31.455953561","filePath":"null","pinned":false},{"value":"    result_cve_data_list = []\n","recorded":"2024-10-07 21:50:30.937591867","filePath":"null","pinned":false},{"value":"    # r\n","recorded":"2024-10-07 21:50:20.502354912","filePath":"null","pinned":false},{"value":"esult_model = dict(\n    #     external_id=cve_id,\n    #     global_id=f'NPPKT.{VENDOR_NAME}.{cve_id}',\n    #     type=DocumentTypes.VULNERABILITY,\n    #     created='',\n    #     cve_list=[cve_id],\n    #     models_conditions=build_models_conditions(definition, package_mapping),\n    #     locales={\n    #         cve_id: {\n    #             VENDOR_NAME: dict(\n    #                 en=dict(\n    #                     short_description='',\n    #                     description=DESCRIPTION_EN.format(package_name=package_name),\n    #                     title=TITLE['en'].format(\n    #                         cve_id=cve_id,\n    #                         security_id=security_id\n    #                     ),\n    #                     how_to_fix=HOW_TO_FIX['en'].format(\n    #                         os_version=os_version,\n    #                         package_name=package_name,\n    #                         package_version=package_version\n    #                     )\n    #                 ),\n    #                 ru=dict(\n    #                     short_description='',\n    #                     description=metadata['description'],\n    #                     title=TITLE['ru'].format(\n    #                         cve_id=cve_id,\n    #                         security_id=security_id\n    #                     ),\n    #                     how_to_fix=HOW_TO_FIX['ru'].format(\n    #                         os_version=os_version,\n    #                         package_name=package_name,\n    #                         package_version=package_version\n    #                     )\n    #                 )\n    #             )\n    #         }\n    #     },\n    #     flags=dict(\n    #         cvss_from_nvd=False,\n    #         have_any_cvss=False,\n    #         have_exploits=False,\n    #         have_not_blank_cvss=False,\n    #         is_default_locale=False\n    #     ),\n    #     cwe={\n    #         cve_id: metadata['bdu']['cwe'].split('; ')\n    #     },\n    #     references=references,\n    #     additional_identifiers={},\n    #     exploits={},\n    #     extra=dict(\n    #         os_version=os_version,\n    #         source_package_name=package_name,\n    #         source_package_version=package_version\n    #     ),\n    #     cvss={}\n    # )\n    #\n    # return result_model","recorded":"2024-10-07 21:50:18.958297269","filePath":"null","pinned":false},{"value":"    pprint(intervals)\n","recorded":"2024-10-07 21:48:45.49690041","filePath":"null","pinned":false},{"value":"patch_list","recorded":"2024-10-07 21:48:20.28821359","filePath":"null","pinned":false},{"value":"intervals","recorded":"2024-10-07 21:48:18.899371689","filePath":"null","pinned":false},{"value":"left_value = Version(f'{first_version.major}.{first_version.minor}.0')","recorded":"2024-10-07 21:44:20.431340672","filePath":"null","pinned":false},{"value":"if not VERSIONS_PATTERN.search(version):\n                continue\n","recorded":"2024-10-07 21:40:35.435051287","filePath":"null","pinned":false},{"value":"\\d+\\.?\\d*\\.?\\d*.*","recorded":"2024-10-07 21:39:18.955425977","filePath":"null","pinned":false},{"value":"['3002', '3001.1, 3001.2', '3000.3, 3000.4', '2019.2.5, 2019.2.6', '2018.3.5', '2017.7.4, 2017.7.8', '2016.11.3, 2016.11.6, 2016.11.10', '2016.3.4, 2016.3.6, 2016.3.8', '2015.8.10, 2015.8.13']\n['3002.2', '3001.4', '3000.6', '2019.2.8', '2019.2.5', '2018.3.5', '2017.7.8', '2016.11.10', '2016.11.6', '2016.11.5', '2016.11.3', '2016.3.8', '2016.3.6', '2016.3.4', '2015.8.13', '2015.8.10', 'KB article: Upgrading Your Salt Infrastructure', 'Salt Docs: Best Way to Restart a Sal\nt Minion Daemon with Salt After Upgrade']\n['3003.3', '3002.7', '3001.8']\n['3004.1', '3003.4', '3002.8']\n['3004.2', '3003.5', '3002.9']\n['3005.2', '3006.2']\n['3005.4', '3006.4']\n['3005.5', '3006.6']","recorded":"2024-10-07 21:39:04.987853836","filePath":"null","pinned":false},{"value":"                if parsed_version.minor != left_value.minor:\n                    continue\n","recorded":"2024-10-07 21:34:50.615716389","filePath":"null","pinned":false},{"value":"            \n","recorded":"2024-10-07 21:33:56.996676462","filePath":"null","pinned":false},{"value":"        \n    \n","recorded":"2024-10-07 21:33:48.720496184","filePath":"null","pinned":false},{"value":"\n\n","recorded":"2024-10-07 21:33:47.546464352","filePath":"null","pinned":false},{"value":"            \n\n","recorded":"2024-10-07 21:33:46.478316938","filePath":"null","pinned":false},{"value":"  for version in versions:\n","recorded":"2024-10-07 21:33:28.564403491","filePath":"null","pinned":false},{"value":"        for version in splitted_version_list:\n            if not VERSIONS_PATTERN.search(version):\n                continue\n            \n            \n","recorded":"2024-10-07 21:25:22.368300704","filePath":"null","pinned":false},{"value":"versions","recorded":"2024-10-07 21:25:18.145297428","filePath":"null","pinned":false},{"value":"splitted_version_list","recorded":"2024-10-07 21:25:16.390911909","filePath":"null","pinned":false},{"value":"first_version = Version(versions[0])\n","recorded":"2024-10-07 21:24:50.513140839","filePath":"null","pinned":false},{"value":"intervals = []\n","recorded":"2024-10-07 21:24:38.494219458","filePath":"null","pinned":false},{"value":"version_list.split(', ')","recorded":"2024-10-07 21:23:34.668408705","filePath":"null","pinned":false},{"value":" print(version)","recorded":"2024-10-07 21:22:46.229157135","filePath":"null","pinned":false},{"value":"patches","recorded":"2024-10-07 21:21:32.396412758","filePath":"null","pinned":false},{"value":"    versions = sorted(patch_list, key=lambda x: Version(x), reverse=True)\n","recorded":"2024-10-07 21:16:43.392738504","filePath":"null","pinned":false},{"value":"    patch_list = []\n","recorded":"2024-10-07 21:16:10.268808345","filePath":"null","pinned":false},{"value":"            patch_list.extend(patches)\n","recorded":"2024-10-07 21:16:03.420113451","filePath":"null","pinned":false},{"value":"patch_info","recorded":"2024-10-07 21:15:26.902334843","filePath":"null","pinned":false},{"value":".split(', ')","recorded":"2024-10-07 21:15:15.726483783","filePath":"null","pinned":false},{"value":"            print(patches)\n","recorded":"2024-10-07 21:15:08.327778603","filePath":"null","pinned":false},{"value":"            for patch_info in patches:\n","recorded":"2024-10-07 21:15:01.997479826","filePath":"null","pinned":false},{"value":"\n    patch_list = list(filter(lambda x: VERSIONS_PATTERN.search(x), patch_list))","recorded":"2024-10-07 21:14:49.456464587","filePath":"null","pinned":false},{"value":"üì∑ 502820-93724188.png","recorded":"2024-10-07 18:53:33.139709436","filePath":"/home/jumanji/.config/clipse/tmp_files/502820-93724188.png","pinned":false},{"value":"        require(\"core.utils\").load_mappings(\"dap_python\")","recorded":"2024-10-07 18:03:56.386056582","filePath":"null","pinned":false},{"value":"config = function()\n        -- load mason-nvim-dap here, after all adapters have been setup\n        if LazyVim.has(\"mason-nvim-dap.nvim\") then\n            require(\"mason-nvim-dap\").setup(LazyVim.opts(\"mason-nvim-dap.nvim\"))\n        end\n\n        vim.api.nvim_set_hl(0, \"DapStoppedLine\", { default = true, link = \"Visual\" })\n\n        for name, sign in pairs(LazyVim.config.icons.dap) do\n            sign = type(sign) == \"table\" and sign or { sign }\n            vim.fn.sign_define(\n                \"Dap\" .. name,\n                { text = sign[1], texthl = sign[2] or \"DiagnosticInfo\", linehl = sign[3], numhl = sign[3] }\n            )\n        end\n\n        -- setup dap config by VsCode launch.json file\n        local vscode = require(\"dap.ext.vscode\")\n        local json = require(\"plenary.json\")\n        vscode.json_decode = function(str)\n            return vim.json.decode(json.json_strip_comments(str))\n        end\n\n        -- Extends dap.configurations with entries read from .vscode/launch.json\n        if vim.fn.filereadable(\".vscode/launch.json\") then\n            vscode.load_launchjs()\n        end\n    end,\n","recorded":"2024-10-07 18:02:26.83057315","filePath":"null","pinned":false},{"value":"{\n    \"rcarriga/nvim-dap-ui\",\n    dependencies = \"mfussenegger/nvim-dap\",\n    config = function()\n        local dap = require(\"dap\")\n        local dapui = require(\"dapui\")\n        dapui.setup()\n        dap.listeners.after.event_initialized[\"dapui_config\"] = function()\n            dapui.open()\n        end\n        dap.listeners.before.event_terminated[\"dapui_config\"] = function()\n            dapui.close()\n        end\n        dap.listeners.before.event_exited[\"dapui_config\"] = function()\n            dapui.close()\n        end\n    end\n}","recorded":"2024-10-07 17:52:23.517497983","filePath":"null","pinned":false},{"value":"{\n  \"rcarriga/nvim-dap-ui\",\n  dependencies = { \"nvim-neotest/nvim-nio\" },\n  -- stylua: ignore\n  keys = {\n    { \"\u003cleader\u003edu\", function() require(\"dapui\").toggle({ }) end, desc = \"Dap UI\" },\n    { \"\u003cleader\u003ede\", function() require(\"dapui\").eval() end, desc = \"Eval\", mode = {\"n\", \"v\"} },\n  },\n  opts = {},\n  config = function(_, opts)\n    local dap = require(\"dap\")\n    local dapui = require(\"dapui\")\n    dapui.setup(opts)\n    dap.listeners.after.event_initialized[\"dapui_config\"] = function()\n      dapui.open({})\n    end\n    dap.listeners.before.event_terminated[\"dapui_config\"] = function()\n      dapui.close({})\n    end\n    dap.listeners.before.event_exited[\"dapui_config\"] = function()\n      dapui.close({})\n    end\n  end,\n}","recorded":"2024-10-07 17:52:17.480982202","filePath":"null","pinned":false},{"value":"  opts = {},\n","recorded":"2024-10-07 17:51:24.415369997","filePath":"null","pinned":false},{"value":"{\n  \"theHamsta/nvim-dap-virtual-text\",\n  opts = {},\n}","recorded":"2024-10-07 17:51:08.073325847","filePath":"null","pinned":false},{"value":"{\n    \"mfussenegger/nvim-dap\",\n    config = function(_, opts)\n        require(\"core.utils\").load_mappings(\"dap\")\n    end\n}","recorded":"2024-10-07 17:49:46.416751126","filePath":"null","pinned":false},{"value":"{\n  \"mfussenegger/nvim-dap\",\n  recommended = true,\n  desc = \"Debugging support. Requires language specific adapters to be configured. (see lang extras)\",\n\n  dependencies = {\n    \"rcarriga/nvim-dap-ui\",\n    -- virtual text for the debugger\n    {\n      \"theHamsta/nvim-dap-virtual-text\",\n      opts = {},\n    },\n  },\n\n  -- stylua: ignore\n  keys = {\n    { \"\u003cleader\u003ed\", \"\", desc = \"+debug\", mode = {\"n\", \"v\"} },\n    { \"\u003cleader\u003edB\", function() require(\"dap\").set_breakpoint(vim.fn.input('Breakpoint condition: ')) end, desc = \"Breakpoint Condition\" },\n    { \"\u003cleader\u003edb\", function() require(\"dap\").toggle_breakpoint() end, desc = \"Toggle Breakpoint\" },\n    { \"\u003cleader\u003edc\", function() require(\"dap\").continue() end, desc = \"Continue\" },\n    { \"\u003cleader\u003eda\", function() require(\"dap\").continue({ before = get_args }) end, desc = \"Run with Args\" },\n    { \"\u003cleader\u003edC\", function() require(\"dap\").run_to_cursor() end, desc = \"Run to Cursor\" },\n    { \"\u003cleader\u003edg\", function() require(\"dap\").goto_() end, desc = \"Go to Line (No Execute)\" },\n    { \"\u003cleader\u003edi\", function() require(\"dap\").step_into() end, desc = \"Step Into\" },\n    { \"\u003cleader\u003edj\", function() require(\"dap\").down() end, desc = \"Down\" },\n    { \"\u003cleader\u003edk\", function() require(\"dap\").up() end, desc = \"Up\" },\n    { \"\u003cleader\u003edl\", function() require(\"dap\").run_last() end, desc = \"Run Last\" },\n    { \"\u003cleader\u003edo\", function() require(\"dap\").step_out() end, desc = \"Step Out\" },\n    { \"\u003cleader\u003edO\", function() require(\"dap\").step_over() end, desc = \"Step Over\" },\n    { \"\u003cleader\u003edp\", function() require(\"dap\").pause() end, desc = \"Pause\" },\n    { \"\u003cleader\u003edr\", function() require(\"dap\").repl.toggle() end, desc = \"Toggle REPL\" },\n    { \"\u003cleader\u003eds\", function() require(\"dap\").session() end, desc = \"Session\" },\n    { \"\u003cleader\u003edt\", function() require(\"dap\").terminate() end, desc = \"Terminate\" },\n    { \"\u003cleader\u003edw\", function() require(\"dap.ui.widgets\").hover() end, desc = \"Widgets\" },\n  },\n\n  config = function()\n    -- load mason-nvim-dap here, after all adapters have been setup\n    if LazyVim.has(\"mason-nvim-dap.nvim\") then\n      require(\"mason-nvim-dap\").setup(LazyVim.opts(\"mason-nvim-dap.nvim\"))\n    end\n\n    vim.api.nvim_set_hl(0, \"DapStoppedLine\", { default = true, link = \"Visual\" })\n\n    for name, sign in pairs(LazyVim.config.icons.dap) do\n      sign = type(sign) == \"table\" and sign or { sign }\n      vim.fn.sign_define(\n        \"Dap\" .. name,\n        { text = sign[1], texthl = sign[2] or \"DiagnosticInfo\", linehl = sign[3], numhl = sign[3] }\n      )\n    end\n\n    -- setup dap config by VsCode launch.json file\n    local vscode = require(\"dap.ext.vscode\")\n    local json = require(\"plenary.json\")\n    vscode.json_decode = function(str)\n      return vim.json.decode(json.json_strip_comments(str))\n    end\n\n    -- Extends dap.configurations with entries read from .vscode/launch.json\n    if vim.fn.filereadable(\".vscode/launch.json\") then\n      vscode.load_launchjs()\n    end\n  end,\n}","recorded":"2024-10-07 17:49:41.322095879","filePath":"null","pinned":false},{"value":":LazyExtras","recorded":"2024-10-07 17:48:29.199105809","filePath":"null","pinned":false},{"value":"Toggle Breakpoint","recorded":"2024-10-07 17:45:58.508586196","filePath":"null","pinned":false},{"value":"{ desc = \"Black python formatting\" }","recorded":"2024-10-07 17:44:16.959286632","filePath":"null","pinned":false},{"value":"{\n    \"mfussenegger/nvim-dap-python\",\n    ft = \"python\",\n    dependencies = {\n      \"mfussenegger/nvim-dap\",\n      \"rcarriga/nvim-dap-ui\",\n      \"nvim-neotest/nvim-nio\",\n    },\n    config = function(_, opts)\n      local path = \"~/.local/share/nvim/mason/packages/debugpy/venv/bin/python\"\n      require(\"dap-python\").setup(path)\n      require(\"core.utils\").load_mappings(\"dap_python\")\n    end,\n  }","recorded":"2024-10-07 17:34:52.769208442","filePath":"null","pinned":false},{"value":"{\n    \"nvim-neotest/nvim-nio\",\n  }","recorded":"2024-10-07 17:34:03.920000312","filePath":"null","pinned":false},{"value":"{\n    \"rcarriga/nvim-dap-ui\",\n    dependencies = \"mfussenegger/nvim-dap\",\n    config = function()\n      local dap = require(\"dap\")\n      local dapui = require(\"dapui\")\n      dapui.setup()\n      dap.listeners.after.event_initialized[\"dapui_config\"] = function()\n        dapui.open()\n      end\n      dap.listeners.before.event_terminated[\"dapui_config\"] = function()\n        dapui.close()\n      end\n      dap.listeners.before.event_exited[\"dapui_config\"] = function()\n        dapui.close()\n      end\n    end\n  }","recorded":"2024-10-07 17:33:44.672064492","filePath":"null","pinned":false},{"value":"{\n    \"mfussenegger/nvim-dap\",\n    config = function(_, opts)\n      require(\"core.utils\").load_mappings(\"dap\")\n    end\n  }","recorded":"2024-10-07 17:32:13.373375477","filePath":"null","pinned":false},{"value":" \"lemminx\",","recorded":"2024-10-07 17:29:18.605958613","filePath":"null","pinned":false},{"value":"            parsed_current_version = Version(current_version)\n","recorded":"2024-10-07 16:23:23.591293689","filePath":"null","pinned":false},{"value":"üì∑ 32675-907431229.png","recorded":"2024-10-07 16:07:56.915143092","filePath":"/home/jumanji/.config/clipse/tmp_files/32675-907431229.png","pinned":false},{"value":"2016.11.0","recorded":"2024-10-07 16:07:36.520374287","filePath":"null","pinned":false},{"value":"2016.3.8","recorded":"2024-10-07 16:07:22.379701398","filePath":"null","pinned":false},{"value":"üì∑ 31378-464271004.png","recorded":"2024-10-07 16:06:59.472039298","filePath":"/home/jumanji/.config/clipse/tmp_files/31378-464271004.png","pinned":false},{"value":"192.168.1.215","recorded":"2024-10-07 16:04:51.070239515","filePath":"null","pinned":false},{"value":"transparent","recorded":"2024-10-07 16:04:11.407814447","filePath":"null","pinned":false},{"value":"@define-color color2 rgba(0, 0, 0, 0.3);\n","recorded":"2024-10-07 16:03:21.989057761","filePath":"null","pinned":false},{"value":"rgba(0, 0, 0, 0.3)","recorded":"2024-10-07 16:02:55.473321103","filePath":"null","pinned":false},{"value":"üì∑ 2686331-113093449.png","recorded":"2024-10-07 16:01:33.051507356","filePath":"/home/jumanji/.config/clipse/tmp_files/2686331-113093449.png","pinned":false}]}